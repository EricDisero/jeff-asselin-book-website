---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import SongFolder from '../components/SongFolder.astro';
import { videos } from '../data/videos.js';

// Filter for Solo #1 videos specifically (not #10)
const solo1Videos = videos.filter(video => {
  const title = video.title?.toLowerCase() || '';
  const tags = video.tags?.map(tag => tag.toLowerCase()) || [];
  const id = video.id || '';
  
  // Check for exact "solo #1" matches, but exclude "solo #10"
  const titleMatch = title.includes('solo #1') && !title.includes('solo #10');
  const tagMatch = tags.some(tag => tag.includes('solo #1') && !tag.includes('solo #10'));
  const idMatch = id.includes('solo1') && !id.includes('solo10');
  
  return titleMatch || tagMatch || idMatch;
});

console.log('Found Solo #1 videos:', solo1Videos.length);
---

<Layout title="Video Folders Test - The Rudimental Blueprint">
  <Header />
  
  <section class="videos">
    <div class="videos-container">
      <h1 class="videos-title">Solo #1 Collection</h1>
      <p class="videos-subtitle">Testing the folder system with Solo #1 videos</p>
      
      <!-- Search bar -->
      <div class="search-box">
        <input 
          type="text" 
          id="search" 
          placeholder="Search Solo #1 videos..." 
          class="search-input"
        />
      </div>
      
      <!-- Debug Information -->
      <div class="test-info">
        <h3>Solo #1 Stats:</h3>
        <p>Videos found: <strong>{solo1Videos.length}</strong></p>
        <p>Tempo range: <strong>{Math.min(...solo1Videos.map(v => v.tempo))} - {Math.max(...solo1Videos.map(v => v.tempo))} BPM</strong></p>
        <p>Pages: <strong>{[...new Set(solo1Videos.map(v => v.pageNumber))].sort().join(', ')}</strong></p>
      </div>

      <!-- Solo #1 Folder -->
      {solo1Videos.length > 0 ? (
        <div class="folder-showcase">
          <SongFolder 
            songName="Solo #1" 
            videos={solo1Videos}
            isExpanded={false}
          />
        </div>
      ) : (
        <div class="no-videos">
          <p>No Solo #1 videos found.</p>
        </div>
      )}
    </div>
  </section>

  <!-- Video Modal -->
  <div id="videoModal" class="video-modal">
    <div class="modal-backdrop" id="modalBackdrop"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modalTitle">Video Title</h3>
        <button class="modal-close" id="modalClose">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="modal-video">
        <iframe 
          id="videoFrame"
          width="100%" 
          height="100%" 
          src="" 
          style="border: none;"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen>
        </iframe>
      </div>
    </div>
  </div>

  <script>
    // Handle thumbnail fallbacks
    function handleThumbnailError(img: any) {
      const youtubeId = img.src.split('/')[4];
      const fallbacks = ['hqdefault.jpg', 'sddefault.jpg', 'mqdefault.jpg', 'default.jpg', '0.jpg'];
      
      let currentIndex = parseInt(img.dataset.fallbackIndex || '0');
      
      if (currentIndex < fallbacks.length) {
        img.dataset.fallbackIndex = (currentIndex + 1).toString();
        img.src = `https://img.youtube.com/vi/${youtubeId}/${fallbacks[currentIndex]}`;
      } else {
        img.style.display = 'none';
        img.parentElement.innerHTML = '<div class="thumbnail-placeholder">No thumbnail available</div>';
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('videoModal') as HTMLElement;
      const modalBackdrop = document.getElementById('modalBackdrop') as HTMLElement;
      const modalClose = document.getElementById('modalClose') as HTMLElement;
      const modalTitle = document.getElementById('modalTitle') as HTMLElement;
      const videoFrame = document.getElementById('videoFrame') as HTMLIFrameElement;
      const searchInput = document.getElementById('search') as HTMLInputElement;
      
      // Search functionality
      searchInput?.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const videoCards = document.querySelectorAll('.video-card');
        
        videoCards.forEach(card => {
          const title = card.querySelector('.video-title')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('.video-description')?.textContent?.toLowerCase() || '';
          const shouldShow = title.includes(searchTerm) || description.includes(searchTerm);
          (card as HTMLElement).style.display = shouldShow ? 'block' : 'none';
        });
      });
      
      // Folder expand/collapse functionality
      function toggleFolder(folderCard: Element) {
        const videosContainer = folderCard.parentElement?.querySelector('.videos-container');
        
        if (videosContainer) {
          const isExpanded = folderCard.getAttribute('data-expanded') === 'true';
          const newState = !isExpanded;
          
          folderCard.setAttribute('data-expanded', newState.toString());
          videosContainer.setAttribute('data-expanded', newState.toString());
          
          const expandBtn = folderCard.querySelector('.expand-btn');
          const expandText = expandBtn?.querySelector('.expand-text');
          if (expandText) {
            expandText.textContent = newState ? 'Collapse' : 'Show Videos';
          }
        }
      }
      
      document.addEventListener('click', function(e) {
        const target = e.target as HTMLElement;
        
        // Handle expand button click
        const expandBtn = target.closest('.expand-btn');
        if (expandBtn) {
          e.stopPropagation();
          const folderCard = expandBtn.closest('.folder-card');
          if (folderCard) {
            toggleFolder(folderCard);
          }
          return;
        }
        
        // Handle folder card click (but not if clicking on videos inside)
        const folderCard = target.closest('.folder-card');
        if (folderCard && !target.closest('.videos-container') && !target.closest('.expand-btn')) {
          toggleFolder(folderCard);
          return;
        }
        
        // Handle video play
        const playBtn = target.closest('.play-btn');
        if (playBtn) {
          const youtubeId = (playBtn as HTMLElement).dataset.youtubeId;
          const videoTitle = (playBtn as HTMLElement).dataset.videoTitle;
          
          if (youtubeId && videoTitle && modal && modalTitle && videoFrame) {
            modalTitle.textContent = videoTitle;
            videoFrame.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
          }
        }
      });
      
      // Close modal functionality
      function closeModal() {
        if (modal && videoFrame) {
          modal.style.display = 'none';
          videoFrame.src = '';
          document.body.style.overflow = 'auto';
        }
      }
      
      modalClose?.addEventListener('click', closeModal);
      modalBackdrop?.addEventListener('click', closeModal);
      
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeModal();
        }
      });
    });
  </script>
</Layout>

<style>
  .videos {
    padding: 8rem 0 2rem;
    min-height: 100vh;
    background: #000000;
  }

  .videos-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .videos-title {
    font-size: clamp(2.8rem, 8vw, 5.5rem);
    font-weight: 200;
    line-height: 1.2;
    letter-spacing: -0.03em;
    text-align: center;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #ffffff 0%, #888888 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    overflow: visible;
  }

  .videos-subtitle {
    text-align: center;
    font-size: 1.2rem;
    color: #cccccc;
    margin-bottom: 3rem;
    line-height: 1.7;
  }

  .search-box {
    max-width: 400px;
    margin: 0 auto 3rem;
  }

  .search-input {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 5px;
    color: #fff;
    font-size: 1rem;
  }

  .search-input::placeholder {
    color: #999;
  }

  .search-input:focus {
    outline: none;
    border-color: rgba(255, 255, 255, 0.4);
  }

  .test-info {
    margin: 3rem 0;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #cccccc;
  }

  .test-info h3 {
    color: #ffffff;
    margin-bottom: 1rem;
  }

  .test-info strong {
    color: #60a5fa;
  }

  .folder-showcase {
    margin-top: 3rem;
  }

  .no-videos {
    padding: 2rem;
    background: rgba(255, 0, 0, 0.1);
    border: 1px solid rgba(255, 0, 0, 0.2);
    border-radius: 8px;
    color: #ff6b6b;
    text-align: center;
    margin-top: 2rem;
  }

  .thumbnail-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    color: #999;
    font-size: 0.9rem;
  }

  /* Modal styles */
  .video-modal {
    display: none;
    position: fixed;
    inset: 0;
    z-index: 1000;
    background: rgba(0, 0, 0, 0.8);
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .modal-backdrop {
    position: absolute;
    inset: 0;
  }

  .modal-content {
    position: relative;
    background: #1a1a1a;
    border-radius: 8px;
    width: 100%;
    max-width: 900px;
    max-height: 90vh;
    overflow: hidden;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-header h3 {
    color: #fff;
    margin: 0;
    font-size: 1.2rem;
  }

  .modal-close {
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: background-color 0.3s;
  }

  .modal-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .modal-close svg {
    width: 24px;
    height: 24px;
  }

  .modal-video {
    position: relative;
    aspect-ratio: 16/9;
    background: #000000;
  }

  @media (max-width: 768px) {
    .videos {
      padding: 6rem 0 2rem;
    }

    .videos-container {
      padding: 0 1rem;
    }

    .modal-content {
      width: 95%;
      margin: 0 1rem;
    }
  }
</style> 