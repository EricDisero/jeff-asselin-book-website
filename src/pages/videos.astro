---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { videos, videoCategories, tempoCategories, rudimentTypes } from '../data/videos.js';
---

<Layout title="Video Library - The Rudimental Blueprint">
  <Header />
  
  <section class="videos">
    <div class="videos-container">
      <h1 class="videos-title">Video Library</h1>
      <p class="videos-subtitle">600+ instructional videos to master Chuck Burrows' method</p>
      
      <!-- Tag-based filtering system -->
      <div class="filter-section">
        <div class="filter-group">
          <label class="filter-label">Category</label>
          <div class="filter-tags" id="categoryFilters">
            <button class="filter-tag active" data-filter="all" data-type="category">All Videos</button>
            {Object.entries(videoCategories).map(([key, category]) => (
              <button class="filter-tag" data-filter={key} data-type="category">{category.name}</button>
            ))}
          </div>
        </div>

        <div class="filter-group">
          <label class="filter-label">Difficulty</label>
          <div class="filter-tags" id="difficultyFilters">
            <button class="filter-tag" data-filter="beginner" data-type="difficulty">Beginner</button>
            <button class="filter-tag" data-filter="intermediate" data-type="difficulty">Intermediate</button>
            <button class="filter-tag" data-filter="advanced" data-type="difficulty">Advanced</button>
          </div>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Tempo</label>
          <div class="filter-tags" id="tempoFilters">
            {tempoCategories.map(tempo => (
              <button class="filter-tag" data-filter={tempo.range} data-type="tempo">{tempo.label}</button>
            ))}
          </div>
        </div>

        <div class="filter-group">
          <label class="filter-label">Rudiment Type</label>
          <div class="filter-tags" id="rudimentFilters">
            {rudimentTypes.slice(0, 6).map(rudiment => (
              <button class="filter-tag" data-filter={rudiment} data-type="rudiment">{rudiment}</button>
            ))}
          </div>
        </div>

        <div class="filter-actions">
          <button class="filter-clear" id="clearFilters">Clear All Filters</button>
          <div class="active-filters" id="activeFilters"></div>
        </div>
      </div>
      
      <!-- Search bar -->
      <div class="search-box">
        <input 
          type="text" 
          id="search" 
          placeholder="Search videos..." 
          class="search-input"
        />
      </div>
      
      <!-- Video grid -->
      <div class="video-grid" id="videoGrid">
        {videos.map(video => (
          <div class="video-card" 
               data-category={video.category}
               data-difficulty={video.difficulty}
               data-tempo={video.tempoCategory}
               data-rudiments={video.rudiments.join(',')}
               data-tags={video.tags.join(',')}>
            <div class="video-thumbnail">
              <img 
                src={`https://img.youtube.com/vi/${video.youtubeId}/maxresdefault.jpg`}
                alt={video.title}
                class="thumbnail-image"
              />
              <div class="play-overlay">
                <button class="play-btn" data-youtube-id={video.youtubeId} data-video-title={video.title}>
                  <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </button>
              </div>
            </div>
            
            <div class="video-info">
              <h3 class="video-title">{video.title}</h3>
              <p class="video-description">{video.description}</p>
              <div class="video-meta">
                <span class="tempo">{video.tempo} BPM</span>
                <span class="page">Page {video.pageNumber}</span>
                <span class="difficulty difficulty-{video.difficulty}">{video.difficulty}</span>
              </div>
              <div class="video-rudiments">
                {video.rudiments.slice(0, 3).map(rudiment => (
                  <span class="rudiment-tag">{rudiment}</span>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Video Modal -->
  <div id="videoModal" class="video-modal">
    <div class="modal-backdrop" id="modalBackdrop"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modalTitle">Video Title</h3>
        <button class="modal-close" id="modalClose">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
      <div class="modal-video">
        <iframe 
          id="videoFrame"
          width="100%" 
          height="100%" 
          src="" 
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen>
        </iframe>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('search');
      const videoCards = document.querySelectorAll('.video-card');
      const modal = document.getElementById('videoModal');
      const modalBackdrop = document.getElementById('modalBackdrop');
      const modalClose = document.getElementById('modalClose');
      const modalTitle = document.getElementById('modalTitle');
      const videoFrame = document.getElementById('videoFrame');
      const clearFiltersBtn = document.getElementById('clearFilters');
      const activeFiltersDiv = document.getElementById('activeFilters');
      
      let activeFilters = {};
      
      // Search functionality
      searchInput.addEventListener('input', function() {
        filterVideos();
      });
      
      // Filter functionality
      document.querySelectorAll('.filter-tag').forEach(tag => {
        tag.addEventListener('click', function() {
          const filterType = this.dataset.type;
          const filterValue = this.dataset.filter;
          
          if (filterValue === 'all') {
            // Clear category filters
            delete activeFilters.category;
            document.querySelectorAll('[data-type="category"]').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
          } else {
            // Toggle filter
            if (activeFilters[filterType] === filterValue) {
              delete activeFilters[filterType];
              this.classList.remove('active');
            } else {
              activeFilters[filterType] = filterValue;
              this.classList.add('active');
              
              // Remove active from other buttons in same type
              document.querySelectorAll(`[data-type="${filterType}"]`).forEach(btn => {
                if (btn !== this) btn.classList.remove('active');
              });
            }
          }
          
          updateActiveFiltersDisplay();
          filterVideos();
        });
      });
      
      // Clear all filters
      clearFiltersBtn.addEventListener('click', function() {
        activeFilters = {};
        document.querySelectorAll('.filter-tag').forEach(tag => {
          tag.classList.remove('active');
        });
        document.querySelector('[data-filter="all"]').classList.add('active');
        updateActiveFiltersDisplay();
        filterVideos();
      });
      
      function updateActiveFiltersDisplay() {
        const filterCount = Object.keys(activeFilters).length;
        if (filterCount > 0) {
          activeFiltersDiv.innerHTML = `${filterCount} filter${filterCount > 1 ? 's' : ''} active`;
          activeFiltersDiv.style.display = 'block';
        } else {
          activeFiltersDiv.style.display = 'none';
        }
      }
      
      function filterVideos() {
        const searchTerm = searchInput.value.toLowerCase();
        
        videoCards.forEach(card => {
          let showCard = true;
          
          // Apply search filter
          if (searchTerm) {
            const title = card.querySelector('.video-title').textContent.toLowerCase();
            const description = card.querySelector('.video-description').textContent.toLowerCase();
            const tags = card.dataset.tags.toLowerCase();
            
            if (!title.includes(searchTerm) && !description.includes(searchTerm) && !tags.includes(searchTerm)) {
              showCard = false;
            }
          }
          
          // Apply category filter
          if (activeFilters.category && card.dataset.category !== activeFilters.category) {
            showCard = false;
          }
          
          // Apply difficulty filter
          if (activeFilters.difficulty && card.dataset.difficulty !== activeFilters.difficulty) {
            showCard = false;
          }
          
          // Apply tempo filter
          if (activeFilters.tempo && card.dataset.tempo !== activeFilters.tempo) {
            showCard = false;
          }
          
          // Apply rudiment filter
          if (activeFilters.rudiment && !card.dataset.rudiments.includes(activeFilters.rudiment)) {
            showCard = false;
          }
          
          card.style.display = showCard ? 'block' : 'none';
        });
      }
      
      // Modal functionality
      function openModal(youtubeId, title) {
        modalTitle.textContent = title;
        videoFrame.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
      
      function closeModal() {
        modal.classList.remove('active');
        videoFrame.src = '';
        document.body.style.overflow = '';
      }
      
      // Play button functionality
      document.querySelectorAll('.play-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const youtubeId = this.dataset.youtubeId;
          const title = this.dataset.videoTitle;
          openModal(youtubeId, title);
        });
      });
      
      // Close modal events
      modalClose.addEventListener('click', closeModal);
      modalBackdrop.addEventListener('click', closeModal);
      
      // Escape key to close modal
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
          closeModal();
        }
      });
    });
  </script>
</Layout>

<style>
  .videos {
    padding: 8rem 0 2rem; /* Top padding for glassmorphism header */
    min-height: 100vh;
  }

  .videos-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .videos-title {
    font-size: clamp(2.8rem, 8vw, 5.5rem);
    font-weight: 200;
    line-height: 1.2;
    letter-spacing: -0.03em;
    text-align: center;
    margin-bottom: 1rem;
    /* Same silvery gradient as hero section */
    background: linear-gradient(135deg, #ffffff 0%, #888888 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    overflow: visible;
  }

  .videos-subtitle {
    text-align: center;
    font-size: 1.2rem;
    color: #cccccc;
    margin-bottom: 3rem;
    line-height: 1.7;
  }

  /* Filter System Styling */
  .filter-section {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 2rem;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
  }

  .filter-row {
    margin-bottom: 2rem;
  }

  .filter-group {
    margin-bottom: 1.5rem;
  }

  .filter-label {
    display: block;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .filter-tags {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .filter-tag {
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.15);
    color: #cccccc;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .filter-tag:hover {
    background: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 255, 255, 0.25);
    color: #ffffff;
    transform: translateY(-1px);
  }

  .filter-tag.active {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    color: #ffffff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .filter-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .filter-clear {
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #cccccc;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .filter-clear:hover {
    border-color: rgba(255, 255, 255, 0.4);
    color: #ffffff;
  }

  .active-filters {
    font-size: 0.85rem;
    color: #888888;
    display: none;
  }

  .search-box {
    max-width: 400px;
    margin: 0 auto 3rem;
  }

  .search-input {
    width: 100%;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 5px; /* Changed to 5px for consistency */
    color: #fff;
    font-size: 1rem;
  }

  .search-input::placeholder {
    color: #999;
  }

  .search-input:focus {
    outline: none;
    border-color: rgba(255, 255, 255, 0.4);
  }

  .video-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .video-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 5px; /* Changed to 5px for consistency */
    overflow: hidden;
    transition: transform 0.3s, border-color 0.3s;
  }

  .video-card:hover {
    transform: translateY(-4px);
    border-color: rgba(255, 255, 255, 0.2);
  }

  .video-thumbnail {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
  }

  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .play-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .video-card:hover .play-overlay {
    opacity: 1;
  }

  .play-btn {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: transform 0.3s;
  }

  .play-btn:hover {
    transform: scale(1.1);
  }

  .play-btn svg {
    width: 24px;
    height: 24px;
    color: #000;
    margin-left: 2px;
  }

  .video-info {
    padding: 1.5rem;
  }

  .video-title {
    font-weight: 600;
    color: #fff;
    margin-bottom: 0.5rem;
    line-height: 1.3;
  }

  .video-description {
    color: #ccc;
    font-size: 0.875rem;
    line-height: 1.4;
    margin-bottom: 1rem;
  }

  .video-meta {
    display: flex;
    gap: 0.75rem;
    font-size: 0.75rem;
    margin-bottom: 0.75rem;
    flex-wrap: wrap;
  }

  .tempo, .page {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 10px;
    color: #ccc;
  }

  .difficulty {
    padding: 0.25rem 0.5rem;
    border-radius: 10px;
    font-weight: 600;
    text-transform: uppercase;
  }

  .difficulty-beginner {
    background: rgba(34, 197, 94, 0.2);
    color: #4ade80;
  }

  .difficulty-intermediate {
    background: rgba(249, 115, 22, 0.2);
    color: #fb923c;
  }

  .difficulty-advanced {
    background: rgba(239, 68, 68, 0.2);
    color: #f87171;
  }

  .video-rudiments {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .rudiment-tag {
    background: rgba(255, 255, 255, 0.08);
    color: #cccccc;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 500;
  }

  /* Video Modal Styles */
  .video-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .video-modal.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(10px);
  }

  .modal-content {
    position: relative;
    width: 90%;
    max-width: 1000px;
    background: rgba(0, 0, 0, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 5px; /* Changed to 5px for consistency */
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .video-modal.active .modal-content {
    transform: scale(1);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-header h3 {
    color: #ffffff;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }

  .modal-close {
    background: transparent;
    border: none;
    color: #ffffff;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .modal-close svg {
    width: 24px;
    height: 24px;
  }

  .modal-video {
    position: relative;
    aspect-ratio: 16/9;
    background: #000000;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .videos {
      padding: 6rem 0 2rem;
    }

    .videos-container {
      padding: 0 1rem;
    }

    .videos-title {
      font-size: clamp(2.2rem, 8vw, 4rem);
    }

    .filter-section {
      padding: 1.5rem;
    }

    .filter-group {
      margin-bottom: 1.25rem;
    }

    .video-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .modal-content {
      width: 95%;
      margin: 0 1rem;
    }

    .modal-header {
      padding: 1rem;
    }

    .modal-header h3 {
      font-size: 1.1rem;
    }
  }
</style> 