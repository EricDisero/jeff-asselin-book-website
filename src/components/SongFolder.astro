---
export interface Props {
  songName: string;
  videos: Array<{
    id: string;
    title: string;
    youtubeId: string;
    url: string;
    category: string;
    tags: string[];
    tempo: number;
    tempoCategory: string;
    type: string;
    partType?: string | null;
    meter?: string;
    rudiments: string[];
    rudimentFamilies: string[];
    description: string;
    pageNumber: number;
  }>;
  isExpanded?: boolean;
}

const { songName, videos, isExpanded = false } = Astro.props;

// Get stats for the folder
const videoCount = videos.length;
const tempoRange = `${Math.min(...videos.map(v => v.tempo))} - ${Math.max(...videos.map(v => v.tempo))} BPM`;
const pageNumbers = [...new Set(videos.map(v => v.pageNumber))].sort((a, b) => a - b);
const pageRange = pageNumbers.length === 1 ? `Page ${pageNumbers[0]}` : `Pages ${pageNumbers[0]}-${pageNumbers[pageNumbers.length - 1]}`;
const firstVideoThumbnail = videos[0]?.youtubeId;
const meter = videos[0]?.meter || 'simple';
const primaryRudiments = [...new Set(videos.flatMap(v => v.rudiments))].slice(0, 3);
---

<div class="song-folder" data-song-name={songName.toLowerCase()}>
  <!-- Folder Header/Card -->
  <div class="folder-card" data-expanded={isExpanded} data-meter={meter}>
    <!-- Custom Background Pattern -->
    <div class="folder-background">
      <div class="background-pattern"></div>
      <div class="background-overlay"></div>
    </div>
    
    <!-- Folder Content -->
    <div class="folder-content">
      <!-- Title Section -->
      <div class="folder-header">
        <h3 class="folder-title">{songName}</h3>
        <div class="folder-stats">
          <span class="video-count">{videoCount} videos</span>
          <span class="tempo-range">{tempoRange}</span>
          <span class="page-info">{pageRange}</span>
        </div>
      </div>
      
      <!-- Quick Info Tags -->
      <div class="folder-tags">
        <span class={`meter-tag ${meter}`}>{meter === 'waltz' ? 'Waltz (3/4)' : meter === 'compound' ? 'Compound' : 'Simple'}</span>
        {primaryRudiments.map(rudiment => (
          <span class="rudiment-tag">{rudiment}</span>
        ))}
      </div>
      
      <!-- Expand Button -->
      <button class="expand-btn" aria-label={`${isExpanded ? 'Collapse' : 'Expand'} ${songName} videos`}>
        <svg class="expand-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M6 9l6 6 6-6"/>
        </svg>
        <span class="expand-text">{isExpanded ? 'Collapse' : 'Show Videos'}</span>
      </button>
    </div>
    
    <!-- Hover Effects -->
    <div class="folder-glow"></div>
  </div>
  
  <!-- Video Grid (Initially Hidden) -->
  <div class="videos-container" data-expanded={isExpanded}>
    <div class="videos-grid">
      {videos.map(video => (
        <div class="video-card" 
             data-category={video.category}
             data-type={video.type}
             data-tempo={video.tempoCategory}
             data-meter={video.meter}
             data-part-type={video.partType}
             data-rudiments={video.rudiments.join(',')}
             data-rudiment-families={video.rudimentFamilies.join(',')}
             data-tags={video.tags.join(',')}>
          <div class="video-thumbnail">
            <img 
              src={`https://img.youtube.com/vi/${video.youtubeId}/maxresdefault.jpg`}
              alt={video.title}
              class="thumbnail-image"
            />
            <div class="play-overlay">
              <button class="play-btn" data-youtube-id={video.youtubeId} data-video-title={video.title}>
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="video-info">
            <h4 class="video-title">{video.title}</h4>
            <p class="video-description">{video.description}</p>
            <div class="video-meta">
              <span class="tempo">{video.tempo} BPM</span>
              <span class="page">Page {video.pageNumber}</span>
              <span class="video-type">{video.type === 'counting' ? 'With Counting' : video.type === 'duet' ? 'Duet' : 'Performance'}</span>
              {video.meter && <span class="meter">{video.meter}</span>}
              {video.partType && <span class="part-type">{video.partType}</span>}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .song-folder {
    margin-bottom: 2rem;
  }
  
  .folder-card {
    position: relative;
    background: rgba(255, 255, 255, 0.08);
    border: 2px solid rgba(255, 255, 255, 0.12);
    border-radius: 16px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
    min-height: 200px;
  }
  
  .folder-card:hover {
    transform: translateY(-8px) scale(1.02);
    border-color: rgba(59, 130, 246, 0.5);
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.15);
  }
  
  .folder-card[data-expanded="true"] {
    border-color: rgba(59, 130, 246, 0.6);
    background: rgba(59, 130, 246, 0.1);
  }
  
  .folder-background {
    position: absolute;
    inset: 0;
    z-index: 1;
    overflow: hidden;
  }
  
  .background-pattern {
    position: absolute;
    inset: 0;
    transition: transform 0.6s ease;
  }
  
  /* Default pattern - Simple Meter */
  .folder-card .background-pattern {
    background: 
      radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.3) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.3) 0%, transparent 50%),
      radial-gradient(circle at 40% 40%, rgba(16, 185, 129, 0.2) 0%, transparent 40%),
      linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
  }
  
  /* Compound Meter - More complex pattern */
  .folder-card[data-meter="compound"] .background-pattern {
    background: 
      conic-gradient(from 0deg at 30% 70%, rgba(168, 85, 247, 0.4) 0deg, transparent 60deg),
      conic-gradient(from 120deg at 70% 30%, rgba(236, 72, 153, 0.3) 0deg, transparent 60deg),
      radial-gradient(circle at 50% 50%, rgba(139, 92, 246, 0.2) 0%, transparent 60%),
      linear-gradient(45deg, #1e1b4b 0%, #312e81 50%, #4c1d95 100%);
  }
  
  /* Waltz - Elegant flowing pattern */
  .folder-card[data-meter="waltz"] .background-pattern {
    background: 
      radial-gradient(ellipse at 25% 25%, rgba(236, 72, 153, 0.4) 0%, transparent 50%),
      radial-gradient(ellipse at 75% 75%, rgba(219, 39, 119, 0.3) 0%, transparent 50%),
      radial-gradient(circle at 50% 80%, rgba(244, 114, 182, 0.2) 0%, transparent 40%),
      linear-gradient(135deg, #4c0519 0%, #831843 50%, #be185d 100%);
  }
  
  .folder-card:hover .background-pattern {
    transform: scale(1.05) rotate(2deg);
  }
  
  .background-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      rgba(0, 0, 0, 0.7) 0%,
      rgba(0, 0, 0, 0.5) 40%,
      rgba(0, 0, 0, 0.3) 100%
    );
    transition: all 0.4s ease;
  }
  
  .folder-card:hover .background-overlay {
    background: linear-gradient(
      135deg,
      rgba(0, 0, 0, 0.6) 0%,
      rgba(0, 0, 0, 0.3) 40%,
      rgba(0, 0, 0, 0.1) 100%
    );
  }
  
  .folder-content {
    position: relative;
    z-index: 2;
    padding: 2rem;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  
  .folder-header {
    margin-bottom: 1rem;
  }
  
  .folder-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    letter-spacing: -0.02em;
    transition: all 0.3s ease;
  }
  
  .folder-card:hover .folder-title {
    color: #60a5fa;
    transform: translateX(8px);
  }
  
  .folder-stats {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .folder-stats span {
    font-size: 0.9rem;
    color: #e5e7eb;
    background: rgba(255, 255, 255, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .folder-tags {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
  }
  
  .meter-tag {
    padding: 0.4rem 0.8rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .meter-tag.simple {
    background: rgba(34, 197, 94, 0.2);
    color: #4ade80;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }
  
  .meter-tag.compound {
    background: rgba(168, 85, 247, 0.2);
    color: #a78bfa;
    border: 1px solid rgba(168, 85, 247, 0.3);
  }
  
  .meter-tag.waltz {
    background: rgba(236, 72, 153, 0.2);
    color: #f472b6;
    border: 1px solid rgba(236, 72, 153, 0.3);
  }
  
  .rudiment-tag {
    padding: 0.3rem 0.6rem;
    background: rgba(255, 255, 255, 0.08);
    color: #d1d5db;
    border-radius: 12px;
    font-size: 0.75rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .expand-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(59, 130, 246, 0.2);
    border: 2px solid rgba(59, 130, 246, 0.3);
    color: #60a5fa;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
    align-self: flex-start;
  }
  
  .expand-btn:hover {
    background: rgba(59, 130, 246, 0.3);
    border-color: rgba(59, 130, 246, 0.5);
    color: #ffffff;
    transform: translateY(-2px);
  }
  
  .expand-icon {
    width: 18px;
    height: 18px;
    transition: transform 0.3s ease;
  }
  
  .folder-card[data-expanded="true"] .expand-icon {
    transform: rotate(180deg);
  }
  
  .folder-glow {
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    border-radius: 18px;
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: 0;
  }
  
  .folder-card:hover .folder-glow {
    opacity: 1;
    animation: glow-pulse 2s ease-in-out infinite;
  }
  
  @keyframes glow-pulse {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.6; }
  }
  
  /* Videos Container */
  .videos-container {
    margin-top: 1rem;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .videos-container[data-expanded="true"] {
    max-height: 2000px; /* Adjust based on content */
  }
  
  .videos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.02);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  /* Video Card Styles (smaller than main cards) */
  .video-card {
    background: rgba(255, 255, 255, 0.06);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s, border-color 0.3s;
  }
  
  .video-card:hover {
    transform: translateY(-4px);
    border-color: rgba(255, 255, 255, 0.2);
  }
  
  .video-thumbnail {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
  }
  
  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .play-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s;
  }
  
  .video-card:hover .play-overlay {
    opacity: 1;
  }
  
  .play-btn {
    width: 50px;
    height: 50px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: transform 0.3s;
  }
  
  .play-btn:hover {
    transform: scale(1.1);
  }
  
  .play-btn svg {
    width: 20px;
    height: 20px;
    color: #000;
    margin-left: 2px;
  }
  
  .video-info {
    padding: 1rem;
  }
  
  .video-title {
    font-weight: 600;
    color: #fff;
    margin-bottom: 0.5rem;
    line-height: 1.3;
    font-size: 0.9rem;
  }
  
  .video-description {
    color: #ccc;
    font-size: 0.8rem;
    line-height: 1.4;
    margin-bottom: 0.75rem;
  }
  
  .video-meta {
    display: flex;
    gap: 0.5rem;
    font-size: 0.7rem;
    flex-wrap: wrap;
  }
  
  .tempo, .page {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.2rem 0.4rem;
    border-radius: 8px;
    color: #ccc;
  }
  
  .video-type {
    padding: 0.2rem 0.4rem;
    border-radius: 8px;
    font-weight: 600;
    text-transform: capitalize;
    background: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }
  
  .meter {
    padding: 0.2rem 0.4rem;
    border-radius: 8px;
    font-weight: 500;
    background: rgba(168, 85, 247, 0.2);
    color: #a78bfa;
  }
  
  .part-type {
    padding: 0.2rem 0.4rem;
    border-radius: 8px;
    font-weight: 500;
    background: rgba(34, 197, 94, 0.2);
    color: #4ade80;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .folder-content {
      padding: 1.5rem;
    }
    
    .folder-title {
      font-size: 2rem;
    }
    
    .folder-stats {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .videos-grid {
      grid-template-columns: 1fr;
      padding: 1rem;
    }
  }
</style>

<script>
  // Add click handler for expand/collapse functionality
  document.addEventListener('DOMContentLoaded', function() {
    const folderCards = document.querySelectorAll('.folder-card');
    
    folderCards.forEach(card => {
      card.addEventListener('click', function(this: HTMLElement) {
        const songFolder = this.closest('.song-folder') as HTMLElement;
        const videosContainer = songFolder?.querySelector('.videos-container') as HTMLElement;
        const expandIcon = this.querySelector('.expand-icon') as SVGElement;
        const expandText = this.querySelector('.expand-text') as HTMLElement;
        
        const isExpanded = this.dataset.expanded === 'true';
        const newExpanded = !isExpanded;
        
        // Update attributes
        this.dataset.expanded = String(newExpanded);
        if (videosContainer) videosContainer.dataset.expanded = String(newExpanded);
        
        // Update button text
        if (expandText) expandText.textContent = newExpanded ? 'Collapse' : 'Show Videos';
        
        // Optional: Scroll to folder if expanding
        if (newExpanded) {
          setTimeout(() => {
            this.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }, 100);
        }
      });
    });
  });
</script> 